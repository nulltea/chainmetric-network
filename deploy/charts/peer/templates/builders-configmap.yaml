apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.config.peer}}.{{ .Values.config.hostname }}.builders.config
  labels:
  {{- include "chart.labels" . | nindent 4 }}
data:
    detect: |
        #!/bin/sh

        # The bin/detect script is responsible for determining whether or not a buildpack
        # should be used to build a chaincode package and launch it.
        #
        # The peer invokes detect with two arguments:
        # bin/detect CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR
        #
        # When detect is invoked, CHAINCODE_SOURCE_DIR contains the chaincode source and
        # CHAINCODE_METADATA_DIR contains the metadata.json file from the chaincode package installed to the peer.
        # The CHAINCODE_SOURCE_DIR and CHAINCODE_METADATA_DIR should be treated as read only inputs.
        # If the buildpack should be applied to the chaincode source package, detect must return an exit code of 0;
        # any other exit code will indicate that the buildpack should not be applied.

        CHAINCODE_METADATA_DIR="$2"

        set -euo pipefail

        # use jq to extract the chaincode type from metadata.json and exit with
        # success if the chaincode type is golang
        if [ "$(cat "$CHAINCODE_METADATA_DIR/metadata.json" | sed -e 's/[{}]/''/g' | awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'type'\042/){print $(i+1)}}}' | tr -d '"')" = "external" ]; then
            exit 0
        fi

        exit 1

    build: |
        #!/bin/sh

        # The bin/build script is responsible for building, compiling, or transforming the contents
        # of a chaincode package into artifacts that can be used by release and run.
        #
        # The peer invokes build with three arguments:
        # bin/build CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR BUILD_OUTPUT_DIR
        #
        # When build is invoked, CHAINCODE_SOURCE_DIR contains the chaincode source and
        # CHAINCODE_METADATA_DIR contains the metadata.json file from the chaincode package installed to the peer.
        # BUILD_OUTPUT_DIR is the directory where build must place artifacts needed by release and run.
        # The build script should treat the input directories CHAINCODE_SOURCE_DIR and
        # CHAINCODE_METADATA_DIR as read only, but the BUILD_OUTPUT_DIR is writeable.

        CHAINCODE_SOURCE_DIR="$1"
        CHAINCODE_METADATA_DIR="$2"
        BUILD_OUTPUT_DIR="$3"

        set -euo pipefail

        #external chaincodes expect connection.json file in the chaincode package
        if [ ! -f "$CHAINCODE_SOURCE_DIR/connection.json" ]; then
            >&2 echo "$CHAINCODE_SOURCE_DIR/connection.json not found"
            exit 1
        fi

        #simply copy the endpoint information to specified output location
        cp $CHAINCODE_SOURCE_DIR/connection.json $BUILD_OUTPUT_DIR/connection.json

        if [ -d "$CHAINCODE_SOURCE_DIR/META-INF" ]; then
            cp -a $CHAINCODE_SOURCE_DIR/META-INF $BUILD_OUTPUT_DIR/META-INF
        fi

        exit 0

    release: |
        #!/bin/sh

        # The bin/release script is responsible for providing chaincode META-INF to the peer.
        # bin/release is optional. If it is not provided, this step is skipped.
        #
        # The peer invokes release with two arguments:
        # bin/release BUILD_OUTPUT_DIR RELEASE_OUTPUT_DIR
        #
        # When release is invoked, BUILD_OUTPUT_DIR contains the artifacts
        # populated by the build program and should be treated as read only input.
        # RELEASE_OUTPUT_DIR is the directory where release must place artifacts to be consumed by the peer.

        set -euo pipefail

        BUILD_OUTPUT_DIR="$1"
        RELEASE_OUTPUT_DIR="$2"

        # copy indexes from META-INF/* to the output directory
        if [ -d "$BUILD_OUTPUT_DIR/META-INF" ] ; then
           cp -a "$BUILD_OUTPUT_DIR/META-INF/"* "$RELEASE_OUTPUT_DIR/"
        fi

        #external chaincodes expect artifacts to be placed under "$RELEASE_OUTPUT_DIR"/chaincode/server
        if [ -f $BUILD_OUTPUT_DIR/connection.json ]; then
        mkdir -p "$RELEASE_OUTPUT_DIR"/chaincode/server
        cp $BUILD_OUTPUT_DIR/connection.json "$RELEASE_OUTPUT_DIR"/chaincode/server

        #if tls_required is true, copy TLS files (using above example, the fully qualified path for these fils would be "$RELEASE_OUTPUT_DIR"/chaincode/server/tls)

        exit 0
        fi

        exit 1
