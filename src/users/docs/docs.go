// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Timothy Yalugin",
            "url": "https://github.com/timoth-y",
            "email": "timauthx@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://raw.githubusercontent.com/timoth-y/chainmetric-contracts/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users/enroll": {
            "get": {
                "description": "Generates signing cryptographic identity for user and confirms one.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Enroll new user",
                "parameters": [
                    {
                        "description": "Request to enroll new user",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.EnrollmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenter.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenter.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "get": {
                "description": "Request user initial registration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Request to register new user",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/presenter.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/presenter.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "presenter.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "reason": {
                    "type": "object"
                }
            }
        },
        "user.EnrollmentRequest": {
            "type": "object",
            "required": [
                "role",
                "user_id"
            ],
            "properties": {
                "expire_at": {
                    "description": "Date of user's contract expiration if defined",
                    "type": "string",
                    "example": "2006-01-02T15:04:05Z07:00"
                },
                "role": {
                    "description": "Role of the user",
                    "type": "string",
                    "example": "admin"
                },
                "user_id": {
                    "description": "User's unique identifier",
                    "type": "string",
                    "example": "f4bc94f1-3af4-4ae0-9330-19d86ca42b30"
                }
            }
        },
        "user.RegistrationRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname"
            ],
            "properties": {
                "email": {
                    "description": "Email address of the user",
                    "type": "string",
                    "example": "john.smith@example.com"
                },
                "firstname": {
                    "description": "First name of the user",
                    "type": "string",
                    "example": "John"
                },
                "lastname": {
                    "description": "Last name of the user",
                    "type": "string",
                    "example": "Smith"
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "confirmed": {
                    "description": "User is confirmed by admin.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "User initial registration date and time",
                    "type": "string",
                    "example": "2021-01-02T15:04:05Z07:00"
                },
                "email": {
                    "description": "Email address of the user",
                    "type": "string",
                    "example": "john.smith@example.com"
                },
                "enrollment_id": {
                    "description": "User's enrollment identifier",
                    "type": "string",
                    "example": "e9f437b4-2622-47c3-8d91-921e710c7354"
                },
                "expire_at": {
                    "description": "Date of user's contract expiration if defined",
                    "type": "string",
                    "example": "2021-05-02T15:04:05Z07:00"
                },
                "firstname": {
                    "description": "First name of the user",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "User's unique identifier",
                    "type": "string",
                    "example": "f4bc94f1-3af4-4ae0-9330-19d86ca42b30"
                },
                "lastname": {
                    "description": "Last name of the user",
                    "type": "string",
                    "example": "Smith"
                },
                "role": {
                    "description": "Role of the user",
                    "type": "string",
                    "example": "admin"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "identity.chainmetric.network",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Chainmetric Identity API",
	Description: "Chainmetric Identity API users to authenticate and save preferences.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
