// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: identity/api/presenter/admin.proto

package presenter

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _admin_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EnrollUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EnrollUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetUserID()); err != nil {
		return EnrollUserRequestValidationError{
			field:  "UserID",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Role

	return nil
}

func (m *EnrollUserRequest) _validateUuid(uuid string) error {
	if matched := _admin_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EnrollUserRequestValidationError is the validation error returned by
// EnrollUserRequest.Validate if the designated constraints aren't met.
type EnrollUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrollUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrollUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrollUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrollUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrollUserRequestValidationError) ErrorName() string {
	return "EnrollUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnrollUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrollUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrollUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrollUserRequestValidationError{}

// Validate checks the field values on EnrollUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnrollUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InitialPassword

	return nil
}

// EnrollUserResponseValidationError is the validation error returned by
// EnrollUserResponse.Validate if the designated constraints aren't met.
type EnrollUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrollUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrollUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrollUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrollUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrollUserResponseValidationError) ErrorName() string {
	return "EnrollUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnrollUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrollUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrollUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrollUserResponseValidationError{}
