// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	presenter "github.com/timoth-y/chainmetric-contracts/src/identity/api/presenter"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	GetCandidates(ctx context.Context, in *presenter.UsersRequest, opts ...grpc.CallOption) (*presenter.UsersResponse, error)
	EnrollUser(ctx context.Context, in *presenter.EnrollUserRequest, opts ...grpc.CallOption) (*presenter.EnrollUserResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) GetCandidates(ctx context.Context, in *presenter.UsersRequest, opts ...grpc.CallOption) (*presenter.UsersResponse, error) {
	out := new(presenter.UsersResponse)
	err := c.cc.Invoke(ctx, "/chainmetric.identity.service.AdminService/getCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EnrollUser(ctx context.Context, in *presenter.EnrollUserRequest, opts ...grpc.CallOption) (*presenter.EnrollUserResponse, error) {
	out := new(presenter.EnrollUserResponse)
	err := c.cc.Invoke(ctx, "/chainmetric.identity.service.AdminService/enrollUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	GetCandidates(context.Context, *presenter.UsersRequest) (*presenter.UsersResponse, error)
	EnrollUser(context.Context, *presenter.EnrollUserRequest) (*presenter.EnrollUserResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) GetCandidates(context.Context, *presenter.UsersRequest) (*presenter.UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandidates not implemented")
}
func (UnimplementedAdminServiceServer) EnrollUser(context.Context, *presenter.EnrollUserRequest) (*presenter.EnrollUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollUser not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_GetCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(presenter.UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainmetric.identity.service.AdminService/getCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCandidates(ctx, req.(*presenter.UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EnrollUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(presenter.EnrollUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EnrollUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainmetric.identity.service.AdminService/enrollUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EnrollUser(ctx, req.(*presenter.EnrollUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainmetric.identity.service.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCandidates",
			Handler:    _AdminService_GetCandidates_Handler,
		},
		{
			MethodName: "enrollUser",
			Handler:    _AdminService_EnrollUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/api/rpc/admin.proto",
}
